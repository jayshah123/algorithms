
<!-- saved from url=(0059)http://algs4.cs.princeton.edu/24pq/UnorderedArrayMaxPQ.java -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"></head><body><div id="StayFocusd-infobar" style="display:none;">
    <img src="chrome-extension://laankejkbhbdhmipfmgcngdelahlfoji/common/img/eye_19x19_red.png">
    <span id="StayFocusd-infobar-msg"></span>
    <span id="StayFocusd-infobar-links">
        <a id="StayFocusd-infobar-never-show">hide forever</a>&nbsp;&nbsp;|&nbsp;&nbsp;
        <a id="StayFocusd-infobar-hide">hide once</a>
    </span>
</div><pre style="word-wrap: break-word; white-space: pre-wrap;">/*************************************************************************
 *  Compilation:  javac UnorderedArrayMaxPQ.java
 *  Execution:    java UnorderedArrayMaxPQ
 *  
 *  Priority queue implementation with an unsorted array.
 * 
 *  Limitations
 *  -----------
 *   - no array resizing
 *   - does not check for overflow or underflow.
 *
 *************************************************************************/

public class UnorderedArrayMaxPQ&lt;Key extends Comparable&lt;Key&gt;&gt; {
    private Key[] pq;      // elements
    private int N;         // number of elements

    // set inititial size of heap to hold size elements
    public UnorderedArrayMaxPQ(int capacity) {
        pq = (Key[]) new Comparable[capacity];
        N = 0;
    }

    public boolean isEmpty()   { return N == 0; }
    public int size()          { return N;      }
    public void insert(Key x)  { pq[N++] = x;   }

    public Key delMax() {
        int max = 0;
        for (int i = 1; i &lt; N; i++)
            if (less(max, i)) max = i;
        exch(max, N-1);

        return pq[--N];
    }


   /***********************************************************************
    * Helper functions.
    **********************************************************************/
    private boolean less(int i, int j) {
        return (pq[i].compareTo(pq[j]) &lt; 0);
    }

    private void exch(int i, int j) {
        Key swap = pq[i];
        pq[i] = pq[j];
        pq[j] = swap;
    }


   /***********************************************************************
    * Test routine.
    **********************************************************************/
    public static void main(String[] args) {
        UnorderedArrayMaxPQ&lt;String&gt; pq = new UnorderedArrayMaxPQ&lt;String&gt;(10);
        pq.insert("this");
        pq.insert("is");
        pq.insert("a");
        pq.insert("test");
        while (!pq.isEmpty()) 
            StdOut.println(pq.delMax());
    }

}
</pre></body></html>
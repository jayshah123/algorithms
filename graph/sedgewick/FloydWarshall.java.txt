
<!-- saved from url=(0053)http://algs4.cs.princeton.edu/44sp/FloydWarshall.java -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"></head><body><div id="StayFocusd-infobar" style="display:none;">
    <img src="chrome-extension://laankejkbhbdhmipfmgcngdelahlfoji/common/img/eye_19x19_red.png">
    <span id="StayFocusd-infobar-msg"></span>
    <span id="StayFocusd-infobar-links">
        <a id="StayFocusd-infobar-never-show">hide forever</a>&nbsp;&nbsp;|&nbsp;&nbsp;
        <a id="StayFocusd-infobar-hide">hide once</a>
    </span>
</div><pre style="word-wrap: break-word; white-space: pre-wrap;">/*************************************************************************
 * Compilation:  javac FloydWarshall.java
 * Execution:  java FloydWarshall V E
 * Dependencies: AdjMatrixEdgeWeightedDigraph.java
 *
 * Floyd-Warshall all-pairs shortest path algorithm.
 *
 * % java FloydWarshall 100 500
 *
 * Should check for negative cycles during triple loop; otherwise
 * intermediate numbers can get exponentially large.
 * Reference: "The Floyd-Warshall algorithm on graphs with negative cycles"
 * by Stefan Hougardy
 *
 *************************************************************************/


/**
 * The &lt;tt&gt;FloydWarshall&lt;/tt&gt; class represents a data type for solving the
 * all-pairs shortest paths problem in edge-weighted digraphs with
 * no negative cycles.
 * The edge weights can be positive, negative, or zero.
 * This class finds either a shortest path between every pair of vertices
 * or a negative cycle.
 * &lt;p&gt;
 * This implementation uses the Floyd-Warshall algorithm.
 * The constructor takes time proportional to &lt;em&gt;V&lt;/em&gt;&lt;sup&gt;3&lt;/sup&gt; in the
 * worst case, where &lt;em&gt;V&lt;/em&gt; is the number of vertices.
 * Afterwards, the &lt;tt&gt;dist()&lt;/tt&gt;, &lt;tt&gt;hasPath()&lt;/tt&gt;, and &lt;tt&gt;hasNegativeCycle()&lt;/tt&gt;
 * methods take constant time; the &lt;tt&gt;path()&lt;/tt&gt; and &lt;tt&gt;negativeCycle()&lt;/tt&gt;
 * method takes time proportional to the number of edges returned.
 * &lt;p&gt;
 * For additional documentation, see &lt;a href="/algs4/44sp"&gt;Section 4.4&lt;/a&gt; of
 * &lt;i&gt;Algorithms, 4th Edition&lt;/i&gt; by Robert Sedgewick and Kevin Wayne.
 *
 * @author Robert Sedgewick
 * @author Kevin Wayne
 */ public class FloydWarshall {
    private boolean hasNegativeCycle;  // is there a negative cycle?
    private double[][] distTo;  // distTo[v][w] = length of shortest v-&gt;w path
    private DirectedEdge[][] edgeTo;  // edgeTo[v][w] = last edge on shortest v-&gt;w path

    /**
     * Computes a shortest paths tree from each vertex to to every other vertex in
     * the edge-weighted digraph &lt;tt&gt;G&lt;/tt&gt;. If no such shortest path exists for
     * some pair of vertices, it computes a negative cycle.
     * @param G the edge-weighted digraph
     */
    public FloydWarshall(AdjMatrixEdgeWeightedDigraph G) {
        int V = G.V();
        distTo = new double[V][V];
        edgeTo = new DirectedEdge[V][V];

        // initialize distances to infinity
        for (int v = 0; v &lt; V; v++) {
            for (int w = 0; w &lt; V; w++) {
                distTo[v][w] = Double.POSITIVE_INFINITY;
            }
        }

        // initialize distances using edge-weighted digraph's
        for (int v = 0; v &lt; G.V(); v++) {
            for (DirectedEdge e : G.adj(v)) {
                distTo[e.from()][e.to()] = e.weight();
                edgeTo[e.from()][e.to()] = e;
            }
            // in case of self-loops
            if (distTo[v][v] &gt;= 0.0) {
                distTo[v][v] = 0.0;
                edgeTo[v][v] = null;
            }
        }

        // Floyd-Warshall updates
        for (int i = 0; i &lt; V; i++) {
            // compute shortest paths using only 0, 1, ..., i as intermediate vertices
            for (int v = 0; v &lt; V; v++) {
                if (edgeTo[v][i] == null) continue;  // optimization
                for (int w = 0; w &lt; V; w++) {
                    if (distTo[v][w] &gt; distTo[v][i] + distTo[i][w]) {
                        distTo[v][w] = distTo[v][i] + distTo[i][w];
                        edgeTo[v][w] = edgeTo[i][w];
                    }
                }
                // check for negative cycle
                if (distTo[v][v] &lt; 0.0) {
                    hasNegativeCycle = true;
                    return;
                }
            }
        }
    }

    /**
     * Is there a negative cycle?
     * @return &lt;tt&gt;true&lt;/tt&gt; if there is a negative cycle, and &lt;tt&gt;false&lt;/tt&gt; otherwise
     */
    public boolean hasNegativeCycle() {
        return hasNegativeCycle;
    }

    /**
     * Returns a negative cycle, or &lt;tt&gt;null&lt;/tt&gt; if there is no such cycle.
     * @return a negative cycle as an iterable of edges,
     * or &lt;tt&gt;null&lt;/tt&gt; if there is no such cycle
     */
    public Iterable&lt;DirectedEdge&gt; negativeCycle() {
        for (int v = 0; v &lt; distTo.length; v++) {
            // negative cycle in v's predecessor graph
            if (distTo[v][v] &lt; 0.0) {
                int V = edgeTo.length;
                EdgeWeightedDigraph spt = new EdgeWeightedDigraph(V);
                for (int w = 0; w &lt; V; w++)
                    if (edgeTo[v][w] != null)
                        spt.addEdge(edgeTo[v][w]);
                EdgeWeightedDirectedCycle finder = new EdgeWeightedDirectedCycle(spt);
                assert finder.hasCycle();
                return finder.cycle();
            }
        }
        return null;
    }

    /**
     * Is there a path from the vertex &lt;tt&gt;s&lt;/tt&gt; to vertex &lt;tt&gt;t&lt;/tt&gt;?
     * @param s the source vertex
     * @param t the destination vertex
     * @return &lt;tt&gt;true&lt;/tt&gt; if there is a path from vertex &lt;tt&gt;s&lt;/tt&gt;
     * to vertex &lt;tt&gt;t&lt;/tt&gt;, and &lt;tt&gt;false&lt;/tt&gt; otherwise
     */
    public boolean hasPath(int s, int t) {
        return distTo[s][t] &lt; Double.POSITIVE_INFINITY;
    }

    /**
     * Returns the length of a shortest path from vertex &lt;tt&gt;s&lt;/tt&gt; to vertex &lt;tt&gt;t&lt;/tt&gt;.
     * @param s the source vertex
     * @param t the destination vertex
     * @return the length of a shortest path from vertex &lt;tt&gt;s&lt;/tt&gt; to vertex &lt;tt&gt;t&lt;/tt&gt;;
     * &lt;tt&gt;Double.POSITIVE_INFINITY&lt;/tt&gt; if no such path
     * @throws UnsupportedOperationException if there is a negative cost cycle
     */
    public double dist(int s, int t) {
        if (hasNegativeCycle())
            throw new UnsupportedOperationException("Negative cost cycle exists");
        return distTo[s][t];
    }

    /**
     * Returns a shortest path from vertex &lt;tt&gt;s&lt;/tt&gt; to vertex &lt;tt&gt;t&lt;/tt&gt;.
     * @param s the source vertex
     * @param t the destination vertex
     * @return a shortest path from vertex &lt;tt&gt;s&lt;/tt&gt; to vertex &lt;tt&gt;t&lt;/tt&gt;
     * as an iterable of edges, and &lt;tt&gt;null&lt;/tt&gt; if no such path
     * @throws UnsupportedOperationException if there is a negative cost cycle
     */
    public Iterable&lt;DirectedEdge&gt; path(int s, int t) {
        if (hasNegativeCycle())
            throw new UnsupportedOperationException("Negative cost cycle exists");
        if (!hasPath(s, t)) return null;
        Stack&lt;DirectedEdge&gt; path = new Stack&lt;DirectedEdge&gt;();
        for (DirectedEdge e = edgeTo[s][t]; e != null; e = edgeTo[s][e.from()]) {
            path.push(e);
        }
        return path;
    }

    // check optimality conditions
    private boolean check(EdgeWeightedDigraph G, int s) {

        // no negative cycle
        if (!hasNegativeCycle()) {
            for (int v = 0; v &lt; G.V(); v++) {
                for (DirectedEdge e : G.adj(v)) {
                    int w = e.to();
                    for (int i = 0; i &lt; G.V(); i++) {
                        if (distTo[i][w] &gt; distTo[i][v] + e.weight()) {
                            System.err.println("edge " + e + " is eligible");
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    }


    /**
     * Unit tests the &lt;tt&gt;FloydWarshall&lt;/tt&gt; data type.
     */
    public static void main(String[] args) {

        // random graph with V vertices and E edges, parallel edges allowed
        int V = Integer.parseInt(args[0]);
        int E = Integer.parseInt(args[1]);
        AdjMatrixEdgeWeightedDigraph G = new AdjMatrixEdgeWeightedDigraph(V);
        for (int i = 0; i &lt; E; i++) {
            int v = (int) (V * Math.random());
            int w = (int) (V * Math.random());
            double weight = Math.round(100 * (Math.random() - 0.15)) / 100.0;
            if (v == w) G.addEdge(new DirectedEdge(v, w, Math.abs(weight)));
            else G.addEdge(new DirectedEdge(v, w, weight));
        }

        StdOut.println(G);

        // run Floyd-Warshall algorithm
        FloydWarshall spt = new FloydWarshall(G);

        // print all-pairs shortest path distances
        StdOut.printf("  ");
        for (int v = 0; v &lt; G.V(); v++) {
            StdOut.printf("%6d ", v);
        }
        StdOut.println();
        for (int v = 0; v &lt; G.V(); v++) {
            StdOut.printf("%3d: ", v);
            for (int w = 0; w &lt; G.V(); w++) {
                if (spt.hasPath(v, w)) StdOut.printf("%6.2f ", spt.dist(v, w));
                else StdOut.printf("  Inf ");
            }
            StdOut.println();
        }

        // print negative cycle
        if (spt.hasNegativeCycle()) {
            StdOut.println("Negative cost cycle:");
            for (DirectedEdge e : spt.negativeCycle())
                StdOut.println(e);
            StdOut.println();
        }

        // print all-pairs shortest paths
        else {
            for (int v = 0; v &lt; G.V(); v++) {
                for (int w = 0; w &lt; G.V(); w++) {
                    if (spt.hasPath(v, w)) {
                        StdOut.printf("%d to %d (%5.2f)  ", v, w, spt.dist(v, w));
                        for (DirectedEdge e : spt.path(v, w))
                            StdOut.print(e + "  ");
                        StdOut.println();
                    }
                    else {
                        StdOut.printf("%d to %d no path\n", v, w);
                    }
                }
            }
        }

    }

}
</pre></body></html>
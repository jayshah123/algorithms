
<!-- saved from url=(0059)http://algs4.cs.princeton.edu/44sp/EdgeWeightedDigraph.java -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"></head><body><div id="StayFocusd-infobar" style="display:none;">
    <img src="chrome-extension://laankejkbhbdhmipfmgcngdelahlfoji/common/img/eye_19x19_red.png">
    <span id="StayFocusd-infobar-msg"></span>
    <span id="StayFocusd-infobar-links">
        <a id="StayFocusd-infobar-never-show">hide forever</a>&nbsp;&nbsp;|&nbsp;&nbsp;
        <a id="StayFocusd-infobar-hide">hide once</a>
    </span>
</div><pre style="word-wrap: break-word; white-space: pre-wrap;">/*************************************************************************
 *  Compilation:  javac EdgeWeightedDigraph.java
 *  Execution:    java EdgeWeightedDigraph V E
 *  Dependencies: Bag.java DirectedEdge.java
 *
 *  An edge-weighted digraph, implemented using adjacency lists.
 *
 *************************************************************************/

/**
 *  The &lt;tt&gt;EdgeWeightedDigraph&lt;/tt&gt; class represents a edge-weighted
 *  digraph of vertices named 0 through &lt;em&gt;V&lt;/em&gt; - 1, where each
 *  directed edge is of type {@link DirectedEdge} and has a real-valued weight.
 *  It supports the following two primary operations: add a directed edge
 *  to the digraph and iterate over all of edges incident from a given vertex.
 *  It also provides
 *  methods for returning the number of vertices &lt;em&gt;V&lt;/em&gt; and the number
 *  of edges &lt;em&gt;E&lt;/em&gt;. Parallel edges and self-loops are permitted.
 *  &lt;p&gt;
 *  This implementation uses an adjacency-lists representation, which 
 *  is a vertex-indexed array of @link{Bag} objects.
 *  All operations take constant time (in the worst case) except
 *  iterating over the edges incident from a given vertex, which takes
 *  time proportional to the number of such edges.
 *  &lt;p&gt;
 *  For additional documentation,
 *  see &lt;a href="http://algs4.cs.princeton.edu/44sp"&gt;Section 4.4&lt;/a&gt; of
 *  &lt;i&gt;Algorithms, 4th Edition&lt;/i&gt; by Robert Sedgewick and Kevin Wayne.
 *
 *  @author Robert Sedgewick
 *  @author Kevin Wayne
 */
public class EdgeWeightedDigraph {
    private final int V;
    private int E;
    private Bag&lt;DirectedEdge&gt;[] adj;
    
    /**
     * Initializes an empty edge-weighted digraph with &lt;tt&gt;V&lt;/tt&gt; vertices and 0 edges.
     * param V the number of vertices
     * @throws java.lang.IllegalArgumentException if &lt;tt&gt;V&lt;/tt&gt; &lt; 0
     */
    public EdgeWeightedDigraph(int V) {
        if (V &lt; 0) throw new IllegalArgumentException("Number of vertices in a Digraph must be nonnegative");
        this.V = V;
        this.E = 0;
        adj = (Bag&lt;DirectedEdge&gt;[]) new Bag[V];
        for (int v = 0; v &lt; V; v++)
            adj[v] = new Bag&lt;DirectedEdge&gt;();
    }

    /**
     * Initializes a random edge-weighted digraph with &lt;tt&gt;V&lt;/tt&gt; vertices and &lt;em&gt;E&lt;/em&gt; edges.
     * param V the number of vertices
     * param E the number of edges
     * @throws java.lang.IllegalArgumentException if &lt;tt&gt;V&lt;/tt&gt; &lt; 0
     * @throws java.lang.IllegalArgumentException if &lt;tt&gt;E&lt;/tt&gt; &lt; 0
     */
    public EdgeWeightedDigraph(int V, int E) {
        this(V);
        if (E &lt; 0) throw new IllegalArgumentException("Number of edges in a Digraph must be nonnegative");
        for (int i = 0; i &lt; E; i++) {
            int v = (int) (Math.random() * V);
            int w = (int) (Math.random() * V);
            double weight = Math.round(100 * Math.random()) / 100.0;
            DirectedEdge e = new DirectedEdge(v, w, weight);
            addEdge(e);
        }
    }

    /**  
     * Initializes an edge-weighted digraph from an input stream.
     * The format is the number of vertices &lt;em&gt;V&lt;/em&gt;,
     * followed by the number of edges &lt;em&gt;E&lt;/em&gt;,
     * followed by &lt;em&gt;E&lt;/em&gt; pairs of vertices and edge weights,
     * with each entry separated by whitespace.
     * @param in the input stream
     * @throws java.lang.IndexOutOfBoundsException if the endpoints of any edge are not in prescribed range
     * @throws java.lang.IllegalArgumentException if the number of vertices or edges is negative
     */
    public EdgeWeightedDigraph(In in) {
        this(in.readInt());
        int E = in.readInt();
        if (E &lt; 0) throw new IllegalArgumentException("Number of edges must be nonnegative");
        for (int i = 0; i &lt; E; i++) {
            int v = in.readInt();
            int w = in.readInt();
            if (v &lt; 0 || v &gt;= V) throw new IndexOutOfBoundsException("vertex " + v + " is not between 0 and " + (V-1));
            if (w &lt; 0 || w &gt;= V) throw new IndexOutOfBoundsException("vertex " + w + " is not between 0 and " + (V-1));
            double weight = in.readDouble();
            addEdge(new DirectedEdge(v, w, weight));
        }
    }

    /**
     * Initializes a new edge-weighted digraph that is a deep copy of &lt;tt&gt;G&lt;/tt&gt;.
     * @param G the edge-weighted graph to copy
     */
    public EdgeWeightedDigraph(EdgeWeightedDigraph G) {
        this(G.V());
        this.E = G.E();
        for (int v = 0; v &lt; G.V(); v++) {
            // reverse so that adjacency list is in same order as original
            Stack&lt;DirectedEdge&gt; reverse = new Stack&lt;DirectedEdge&gt;();
            for (DirectedEdge e : G.adj[v]) {
                reverse.push(e);
            }
            for (DirectedEdge e : reverse) {
                adj[v].add(e);
            }
        }
    }

    /**
     * Returns the number of vertices in the edge-weighted digraph.
     * @return the number of vertices in the edge-weighted digraph
     */
    public int V() {
        return V;
    }

    /**
     * Returns the number of edges in the edge-weighted digraph.
     * @return the number of edges in the edge-weighted digraph
     */
    public int E() {
        return E;
    }

    /**
     * Adds the directed edge &lt;tt&gt;e&lt;/tt&gt; to the edge-weighted digraph.
     * @param e the edge
     */
    public void addEdge(DirectedEdge e) {
        int v = e.from();
        adj[v].add(e);
        E++;
    }


    /**
     * Returns the directed edges incident from vertex &lt;tt&gt;v&lt;/tt&gt;.
     * @return the directed edges incident from vertex &lt;tt&gt;v&lt;/tt&gt; as an Iterable
     * @param v the vertex
     * @throws java.lang.IndexOutOfBoundsException unless 0 &lt;= v &lt; V
     */
    public Iterable&lt;DirectedEdge&gt; adj(int v) {
        if (v &lt; 0 || v &gt;= V) throw new IndexOutOfBoundsException("vertex " + v + " is not between 0 and " + (V-1));
        return adj[v];
    }

    /**
     * Returns all directed edges in the edge-weighted digraph.
     * To iterate over the edges in the edge-weighted graph, use foreach notation:
     * &lt;tt&gt;for (DirectedEdge e : G.edges())&lt;/tt&gt;.
     * @return all edges in the edge-weighted graph as an Iterable.
     */
    public Iterable&lt;DirectedEdge&gt; edges() {
        Bag&lt;DirectedEdge&gt; list = new Bag&lt;DirectedEdge&gt;();
        for (int v = 0; v &lt; V; v++) {
            for (DirectedEdge e : adj(v)) {
                list.add(e);
            }
        }
        return list;
    } 

    /**
     * Returns the number of directed edges incident from vertex &lt;tt&gt;v&lt;/tt&gt;.
     * This is known as the &lt;em&gt;outdegree&lt;/em&gt; of vertex &lt;tt&gt;v&lt;/tt&gt;.
     * @return the number of directed edges incident from vertex &lt;tt&gt;v&lt;/tt&gt;
     * @param v the vertex
     * @throws java.lang.IndexOutOfBoundsException unless 0 &lt;= v &lt; V
     */
    public int outdegree(int v) {
        if (v &lt; 0 || v &gt;= V) throw new IndexOutOfBoundsException("vertex " + v + " is not between 0 and " + (V-1));
        return adj[v].size();
    }

    /**
     * Returns a string representation of the edge-weighted digraph.
     * This method takes time proportional to &lt;em&gt;E&lt;/em&gt; + &lt;em&gt;V&lt;/em&gt;.
     * @return the number of vertices &lt;em&gt;V&lt;/em&gt;, followed by the number of edges &lt;em&gt;E&lt;/em&gt;,
     *   followed by the &lt;em&gt;V&lt;/em&gt; adjacency lists of edges
     */
    public String toString() {
        String NEWLINE = System.getProperty("line.separator");
        StringBuilder s = new StringBuilder();
        s.append(V + " " + E + NEWLINE);
        for (int v = 0; v &lt; V; v++) {
            s.append(v + ": ");
            for (DirectedEdge e : adj[v]) {
                s.append(e + "  ");
            }
            s.append(NEWLINE);
        }
        return s.toString();
    }

    /**
     * Unit tests the &lt;tt&gt;EdgeWeightedDigraph&lt;/tt&gt; data type.
     */
    public static void main(String[] args) {
        In in = new In(args[0]);
        EdgeWeightedDigraph G = new EdgeWeightedDigraph(in);
        StdOut.println(G);
    }

}
</pre></body></html>

<!-- saved from url=(0050)http://algs4.cs.princeton.edu/44sp/DijkstraSP.java -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"></head><body><div id="StayFocusd-infobar" style="display:none;">
    <img src="chrome-extension://laankejkbhbdhmipfmgcngdelahlfoji/common/img/eye_19x19_red.png">
    <span id="StayFocusd-infobar-msg"></span>
    <span id="StayFocusd-infobar-links">
        <a id="StayFocusd-infobar-never-show">hide forever</a>&nbsp;&nbsp;|&nbsp;&nbsp;
        <a id="StayFocusd-infobar-hide">hide once</a>
    </span>
</div><pre style="word-wrap: break-word; white-space: pre-wrap;">/*************************************************************************
 *  Compilation:  javac DijkstraSP.java
 *  Execution:    java DijkstraSP input.txt s
 *  Dependencies: EdgeWeightedDigraph.java IndexMinPQ.java Stack.java DirectedEdge.java
 *  Data files:   http://algs4.cs.princeton.edu/44sp/tinyEWD.txt
 *                http://algs4.cs.princeton.edu/44sp/mediumEWD.txt
 *                http://algs4.cs.princeton.edu/44sp/largeEWD.txt
 *
 *  Dijkstra's algorithm. Computes the shortest path tree.
 *  Assumes all weights are nonnegative.
 *
 *  % java DijkstraSP tinyEWD.txt 0
 *  0 to 0 (0.00)  
 *  0 to 1 (1.05)  0-&gt;4  0.38   4-&gt;5  0.35   5-&gt;1  0.32   
 *  0 to 2 (0.26)  0-&gt;2  0.26   
 *  0 to 3 (0.99)  0-&gt;2  0.26   2-&gt;7  0.34   7-&gt;3  0.39   
 *  0 to 4 (0.38)  0-&gt;4  0.38   
 *  0 to 5 (0.73)  0-&gt;4  0.38   4-&gt;5  0.35   
 *  0 to 6 (1.51)  0-&gt;2  0.26   2-&gt;7  0.34   7-&gt;3  0.39   3-&gt;6  0.52   
 *  0 to 7 (0.60)  0-&gt;2  0.26   2-&gt;7  0.34   
 *
 *  % java DijkstraSP mediumEWD.txt 0
 *  0 to 0 (0.00)  
 *  0 to 1 (0.71)  0-&gt;44  0.06   44-&gt;93  0.07   ...  107-&gt;1  0.07   
 *  0 to 2 (0.65)  0-&gt;44  0.06   44-&gt;231  0.10  ...  42-&gt;2  0.11   
 *  0 to 3 (0.46)  0-&gt;97  0.08   97-&gt;248  0.09  ...  45-&gt;3  0.12   
 *  0 to 4 (0.42)  0-&gt;44  0.06   44-&gt;93  0.07   ...  77-&gt;4  0.11   
 *  ...
 *
 *************************************************************************/


/**
 *  The &lt;tt&gt;DijkstraSP&lt;/tt&gt; class represents a data type for solving the
 *  single-source shortest paths problem in edge-weighted digraphs
 *  where the edge weights are nonnegative.
 *  &lt;p&gt;
 *  This implementation uses Dijkstra's algorithm with a binary heap.
 *  The constructor takes time proportional to &lt;em&gt;E&lt;/em&gt; log &lt;em&gt;V&lt;/em&gt;,
 *  where &lt;em&gt;V&lt;/em&gt; is the number of vertices and &lt;em&gt;E&lt;/em&gt; is the number of edges.
 *  Afterwards, the &lt;tt&gt;distTo()&lt;/tt&gt; and &lt;tt&gt;hasPathTo()&lt;/tt&gt; methods take
 *  constant time and the &lt;tt&gt;pathTo()&lt;/tt&gt; method takes time proportional to the
 *  number of edges in the shortest path returned.
 *  &lt;p&gt;
 *  For additional documentation, see &lt;a href="/algs4/44sp"&gt;Section 4.4&lt;/a&gt; of
 *  &lt;i&gt;Algorithms, 4th Edition&lt;/i&gt; by Robert Sedgewick and Kevin Wayne.
 *
 *  @author Robert Sedgewick
 *  @author Kevin Wayne
 */
public class DijkstraSP {
    private double[] distTo;          // distTo[v] = distance  of shortest s-&gt;v path
    private DirectedEdge[] edgeTo;    // edgeTo[v] = last edge on shortest s-&gt;v path
    private IndexMinPQ&lt;Double&gt; pq;    // priority queue of vertices

    /**
     * Computes a shortest paths tree from &lt;tt&gt;s&lt;/tt&gt; to every other vertex in
     * the edge-weighted digraph &lt;tt&gt;G&lt;/tt&gt;.
     * @param G the edge-weighted digraph
     * @param s the source vertex
     * @throws IllegalArgumentException if an edge weight is negative
     * @throws IllegalArgumentException unless 0 &amp;le; &lt;tt&gt;s&lt;/tt&gt; &amp;le; &lt;tt&gt;V&lt;/tt&gt; - 1
     */
    public DijkstraSP(EdgeWeightedDigraph G, int s) {
        for (DirectedEdge e : G.edges()) {
            if (e.weight() &lt; 0)
                throw new IllegalArgumentException("edge " + e + " has negative weight");
        }

        distTo = new double[G.V()];
        edgeTo = new DirectedEdge[G.V()];
        for (int v = 0; v &lt; G.V(); v++)
            distTo[v] = Double.POSITIVE_INFINITY;
        distTo[s] = 0.0;

        // relax vertices in order of distance from s
        pq = new IndexMinPQ&lt;Double&gt;(G.V());
        pq.insert(s, distTo[s]);
        while (!pq.isEmpty()) {
            int v = pq.delMin();
            for (DirectedEdge e : G.adj(v))
                relax(e);
        }

        // check optimality conditions
        assert check(G, s);
    }

    // relax edge e and update pq if changed
    private void relax(DirectedEdge e) {
        int v = e.from(), w = e.to();
        if (distTo[w] &gt; distTo[v] + e.weight()) {
            distTo[w] = distTo[v] + e.weight();
            edgeTo[w] = e;
            if (pq.contains(w)) pq.decreaseKey(w, distTo[w]);
            else                pq.insert(w, distTo[w]);
        }
    }

    /**
     * Returns the length of a shortest path from the source vertex &lt;tt&gt;s&lt;/tt&gt; to vertex &lt;tt&gt;v&lt;/tt&gt;.
     * @param v the destination vertex
     * @return the length of a shortest path from the source vertex &lt;tt&gt;s&lt;/tt&gt; to vertex &lt;tt&gt;v&lt;/tt&gt;;
     *    &lt;tt&gt;Double.POSITIVE_INFINITY&lt;/tt&gt; if no such path
     */
    public double distTo(int v) {
        return distTo[v];
    }

    /**
     * Is there a path from the source vertex &lt;tt&gt;s&lt;/tt&gt; to vertex &lt;tt&gt;v&lt;/tt&gt;?
     * @param v the destination vertex
     * @return &lt;tt&gt;true&lt;/tt&gt; if there is a path from the source vertex
     *    &lt;tt&gt;s&lt;/tt&gt; to vertex &lt;tt&gt;v&lt;/tt&gt;, and &lt;tt&gt;false&lt;/tt&gt; otherwise
     */
    public boolean hasPathTo(int v) {
        return distTo[v] &lt; Double.POSITIVE_INFINITY;
    }

    /**
     * Returns a shortest path from the source vertex &lt;tt&gt;s&lt;/tt&gt; to vertex &lt;tt&gt;v&lt;/tt&gt;.
     * @param v the destination vertex
     * @return a shortest path from the source vertex &lt;tt&gt;s&lt;/tt&gt; to vertex &lt;tt&gt;v&lt;/tt&gt;
     *    as an iterable of edges, and &lt;tt&gt;null&lt;/tt&gt; if no such path
     */
    public Iterable&lt;DirectedEdge&gt; pathTo(int v) {
        if (!hasPathTo(v)) return null;
        Stack&lt;DirectedEdge&gt; path = new Stack&lt;DirectedEdge&gt;();
        for (DirectedEdge e = edgeTo[v]; e != null; e = edgeTo[e.from()]) {
            path.push(e);
        }
        return path;
    }


    // check optimality conditions:
    // (i) for all edges e:            distTo[e.to()] &lt;= distTo[e.from()] + e.weight()
    // (ii) for all edge e on the SPT: distTo[e.to()] == distTo[e.from()] + e.weight()
    private boolean check(EdgeWeightedDigraph G, int s) {

        // check that edge weights are nonnegative
        for (DirectedEdge e : G.edges()) {
            if (e.weight() &lt; 0) {
                System.err.println("negative edge weight detected");
                return false;
            }
        }

        // check that distTo[v] and edgeTo[v] are consistent
        if (distTo[s] != 0.0 || edgeTo[s] != null) {
            System.err.println("distTo[s] and edgeTo[s] inconsistent");
            return false;
        }
        for (int v = 0; v &lt; G.V(); v++) {
            if (v == s) continue;
            if (edgeTo[v] == null &amp;&amp; distTo[v] != Double.POSITIVE_INFINITY) {
                System.err.println("distTo[] and edgeTo[] inconsistent");
                return false;
            }
        }

        // check that all edges e = v-&gt;w satisfy distTo[w] &lt;= distTo[v] + e.weight()
        for (int v = 0; v &lt; G.V(); v++) {
            for (DirectedEdge e : G.adj(v)) {
                int w = e.to();
                if (distTo[v] + e.weight() &lt; distTo[w]) {
                    System.err.println("edge " + e + " not relaxed");
                    return false;
                }
            }
        }

        // check that all edges e = v-&gt;w on SPT satisfy distTo[w] == distTo[v] + e.weight()
        for (int w = 0; w &lt; G.V(); w++) {
            if (edgeTo[w] == null) continue;
            DirectedEdge e = edgeTo[w];
            int v = e.from();
            if (w != e.to()) return false;
            if (distTo[v] + e.weight() != distTo[w]) {
                System.err.println("edge " + e + " on shortest path not tight");
                return false;
            }
        }
        return true;
    }


    /**
     * Unit tests the &lt;tt&gt;DijkstraSP&lt;/tt&gt; data type.
     */
    public static void main(String[] args) {
        In in = new In(args[0]);
        EdgeWeightedDigraph G = new EdgeWeightedDigraph(in);
        int s = Integer.parseInt(args[1]);

        // compute shortest paths
        DijkstraSP sp = new DijkstraSP(G, s);


        // print shortest path
        for (int t = 0; t &lt; G.V(); t++) {
            if (sp.hasPathTo(t)) {
                StdOut.printf("%d to %d (%.2f)  ", s, t, sp.distTo(t));
                if (sp.hasPathTo(t)) {
                    for (DirectedEdge e : sp.pathTo(t)) {
                        StdOut.print(e + "   ");
                    }
                }
                StdOut.println();
            }
            else {
                StdOut.printf("%d to %d         no path\n", s, t);
            }
        }
    }

}
</pre></body></html>
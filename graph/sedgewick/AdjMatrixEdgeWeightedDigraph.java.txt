
<!-- saved from url=(0068)http://algs4.cs.princeton.edu/44sp/AdjMatrixEdgeWeightedDigraph.java -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"></head><body><div id="StayFocusd-infobar" style="display:none;">
    <img src="chrome-extension://laankejkbhbdhmipfmgcngdelahlfoji/common/img/eye_19x19_red.png">
    <span id="StayFocusd-infobar-msg"></span>
    <span id="StayFocusd-infobar-links">
        <a id="StayFocusd-infobar-never-show">hide forever</a>&nbsp;&nbsp;|&nbsp;&nbsp;
        <a id="StayFocusd-infobar-hide">hide once</a>
    </span>
</div><pre style="word-wrap: break-word; white-space: pre-wrap;">/*************************************************************************
 *  Compilation:  javac AdjMatrixEdgeWeightedDigraph.java
 *  Execution:    java AdjMatrixEdgeWeightedDigraph V E
 *  Dependencies: StdOut.java
 *
 *  An edge-weighted digraph, implemented using an adjacency matrix.
 *  Parallel edges are disallowed; self-loops are allowed.
 *  
 *************************************************************************/

import java.util.Iterator;
import java.util.NoSuchElementException;

/**
 *  The &lt;tt&gt;AdjMatrixEdgeWeightedDigraph&lt;/tt&gt; class represents a edge-weighted
 *  digraph of vertices named 0 through &lt;em&gt;V&lt;/em&gt; - 1, where each
 *  directed edge is of type {@link DirectedEdge} and has a real-valued weight.
 *  It supports the following two primary operations: add a directed edge
 *  to the digraph and iterate over all of edges incident from a given vertex.
 *  It also provides
 *  methods for returning the number of vertices &lt;em&gt;V&lt;/em&gt; and the number
 *  of edges &lt;em&gt;E&lt;/em&gt;. Parallel edges are disallowed; self-loops are permitted.
 *  &lt;p&gt;
 *  This implementation uses an adjacency-matrix representation.
 *  All operations take constant time (in the worst case) except
 *  iterating over the edges incident from a given vertex, which takes
 *  time proportional to &lt;em&gt;V&lt;/em&gt;.
 *  &lt;p&gt;
 *  For additional documentation,
 *  see &lt;a href="http://algs4.cs.princeton.edu/44sp"&gt;Section 4.4&lt;/a&gt; of
 *  &lt;i&gt;Algorithms, 4th Edition&lt;/i&gt; by Robert Sedgewick and Kevin Wayne.
 *
 *  @author Robert Sedgewick
 *  @author Kevin Wayne
 */
public class AdjMatrixEdgeWeightedDigraph {
    private int V;
    private int E;
    private DirectedEdge[][] adj;
    
    /**
     * Initializes an empty edge-weighted digraph with &lt;tt&gt;V&lt;/tt&gt; vertices and 0 edges.
     * param V the number of vertices
     * @throws java.lang.IllegalArgumentException if &lt;tt&gt;V&lt;/tt&gt; &lt; 0
     */
    public AdjMatrixEdgeWeightedDigraph(int V) {
        if (V &lt; 0) throw new RuntimeException("Number of vertices must be nonnegative");
        this.V = V;
        this.E = 0;
        this.adj = new DirectedEdge[V][V];
    }

    /**
     * Initializes a random edge-weighted digraph with &lt;tt&gt;V&lt;/tt&gt; vertices and &lt;em&gt;E&lt;/em&gt; edges.
     * param V the number of vertices
     * param E the number of edges
     * @throws java.lang.IllegalArgumentException if &lt;tt&gt;V&lt;/tt&gt; &lt; 0
     * @throws java.lang.IllegalArgumentException if &lt;tt&gt;E&lt;/tt&gt; &lt; 0
     */
    public AdjMatrixEdgeWeightedDigraph(int V, int E) {
        this(V);
        if (E &lt; 0) throw new RuntimeException("Number of edges must be nonnegative");
        if (E &gt; V*V) throw new RuntimeException("Too many edges");

        // can be inefficient
        while (this.E != E) {
            int v = (int) (V * Math.random());
            int w = (int) (V * Math.random());
            double weight = Math.round(100 * Math.random()) / 100.0;
            addEdge(new DirectedEdge(v, w, weight));
        }
    }

    /**
     * Returns the number of vertices in the edge-weighted digraph.
     * @return the number of vertices in the edge-weighted digraph
     */
    public int V() {
        return V;
    }

    /**
     * Returns the number of edges in the edge-weighted digraph.
     * @return the number of edges in the edge-weighted digraph
     */
    public int E() {
        return E;
    }

    /**
     * Adds the directed edge &lt;tt&gt;e&lt;/tt&gt; to the edge-weighted digraph (if there
     * is not already an edge with the same endpoints).
     * @param e the edge
     */
    public void addEdge(DirectedEdge e) {
        int v = e.from();
        int w = e.to();
        if (adj[v][w] == null) {
            E++;
            adj[v][w] = e;
        }
    }

    /**
     * Returns the directed edges incident from vertex &lt;tt&gt;v&lt;/tt&gt;.
     * @return the directed edges incident from vertex &lt;tt&gt;v&lt;/tt&gt; as an Iterable
     * @param v the vertex
     * @throws java.lang.IndexOutOfBoundsException unless 0 &lt;= v &lt; V
     */
    public Iterable&lt;DirectedEdge&gt; adj(int v) {
        return new AdjIterator(v);
    }

    // support iteration over graph vertices
    private class AdjIterator implements Iterator&lt;DirectedEdge&gt;, Iterable&lt;DirectedEdge&gt; {
        private int v, w = 0;
        public AdjIterator(int v) { this.v = v; }

        public Iterator&lt;DirectedEdge&gt; iterator() { return this; }

        public boolean hasNext() {
            while (w &lt; V) {
                if (adj[v][w] != null) return true;
                w++;
            }
            return false;
        }

        public DirectedEdge next() {
            if (hasNext()) { return adj[v][w++];                 }
            else           { throw new NoSuchElementException(); }
        }

        public void remove()  { throw new UnsupportedOperationException();  }
    }

    /**
     * Returns a string representation of the edge-weighted digraph. This method takes
     * time proportional to &lt;em&gt;V&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt;.
     * @return the number of vertices &lt;em&gt;V&lt;/em&gt;, followed by the number of edges &lt;em&gt;E&lt;/em&gt;,
     *   followed by the &lt;em&gt;V&lt;/em&gt; adjacency lists of edges
     */
    public String toString() {
        String NEWLINE = System.getProperty("line.separator");
        StringBuilder s = new StringBuilder();
        s.append(V + " " + E + NEWLINE);
        for (int v = 0; v &lt; V; v++) {
            s.append(v + ": ");
            for (DirectedEdge e : adj(v)) {
                s.append(e + "  ");
            }
            s.append(NEWLINE);
        }
        return s.toString();
    }

    /**
     * Unit tests the &lt;tt&gt;AdjMatrixEdgeWeightedDigraph&lt;/tt&gt; data type.
     */
    public static void main(String[] args) {
        int V = Integer.parseInt(args[0]);
        int E = Integer.parseInt(args[1]);
        AdjMatrixEdgeWeightedDigraph G = new AdjMatrixEdgeWeightedDigraph(V, E);
        StdOut.println(G);
    }

}
</pre></body></html>

<!-- saved from url=(0053)http://algs4.cs.princeton.edu/41undirected/Graph.java -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"></head><body><div id="StayFocusd-infobar" style="display: none; top: 0px;">
    <img src="chrome-extension://laankejkbhbdhmipfmgcngdelahlfoji/common/img/eye_19x19_red.png">
    <span id="StayFocusd-infobar-msg"></span>
    <span id="StayFocusd-infobar-links">
        <a id="StayFocusd-infobar-never-show">hide forever</a>&nbsp;&nbsp;|&nbsp;&nbsp;
        <a id="StayFocusd-infobar-hide">hide once</a>
    </span>
</div><pre style="word-wrap: break-word; white-space: pre-wrap;">/*************************************************************************
 *  Compilation:  javac Graph.java        
 *  Execution:    java Graph input.txt
 *  Dependencies: Bag.java In.java StdOut.java
 *  Data files:   http://algs4.cs.princeton.edu/41undirected/tinyG.txt
 *
 *  A graph, implemented using an array of sets.
 *  Parallel edges and self-loops allowed.
 *
 *  % java Graph tinyG.txt
 *  13 vertices, 13 edges 
 *  0: 6 2 1 5 
 *  1: 0 
 *  2: 0 
 *  3: 5 4 
 *  4: 5 6 3 
 *  5: 3 4 0 
 *  6: 0 4 
 *  7: 8 
 *  8: 7 
 *  9: 11 10 12 
 *  10: 9 
 *  11: 9 12 
 *  12: 11 9 
 *
 *  % java Graph mediumG.txt
 *  250 vertices, 1273 edges 
 *  0: 225 222 211 209 204 202 191 176 163 160 149 114 97 80 68 59 58 49 44 24 15 
 *  1: 220 203 200 194 189 164 150 130 107 72 
 *  2: 141 110 108 86 79 51 42 18 14 
 *  ...
 *  
 *************************************************************************/


/**
 *  The &lt;tt&gt;Graph&lt;/tt&gt; class represents an undirected graph of vertices
 *  named 0 through &lt;em&gt;V&lt;/em&gt; - 1.
 *  It supports the following two primary operations: add an edge to the graph,
 *  iterate over all of the vertices adjacent to a vertex. It also provides
 *  methods for returning the number of vertices &lt;em&gt;V&lt;/em&gt; and the number
 *  of edges &lt;em&gt;E&lt;/em&gt;. Parallel edges and self-loops are permitted.
 *  &lt;p&gt;
 *  This implementation uses an adjacency-lists representation, which 
 *  is a vertex-indexed array of {@link Bag} objects.
 *  All operations take constant time (in the worst case) except
 *  iterating over the vertices adjacent to a given vertex, which takes
 *  time proportional to the number of such vertices.
 *  &lt;p&gt;
 *  For additional documentation, see &lt;a href="http://algs4.cs.princeton.edu/41undirected"&gt;Section 4.1&lt;/a&gt; of
 *  &lt;i&gt;Algorithms, 4th Edition&lt;/i&gt; by Robert Sedgewick and Kevin Wayne.
 *
 *  @author Robert Sedgewick
 *  @author Kevin Wayne
 */
public class Graph {
    private final int V;
    private int E;
    private Bag&lt;Integer&gt;[] adj;
    
    /**
     * Initializes an empty graph with &lt;tt&gt;V&lt;/tt&gt; vertices and 0 edges.
     * param V the number of vertices
     * @throws java.lang.IllegalArgumentException if &lt;tt&gt;V&lt;/tt&gt; &lt; 0
     */
    public Graph(int V) {
        if (V &lt; 0) throw new IllegalArgumentException("Number of vertices must be nonnegative");
        this.V = V;
        this.E = 0;
        adj = (Bag&lt;Integer&gt;[]) new Bag[V];
        for (int v = 0; v &lt; V; v++) {
            adj[v] = new Bag&lt;Integer&gt;();
        }
    }

    /**  
     * Initializes a graph from an input stream.
     * The format is the number of vertices &lt;em&gt;V&lt;/em&gt;,
     * followed by the number of edges &lt;em&gt;E&lt;/em&gt;,
     * followed by &lt;em&gt;E&lt;/em&gt; pairs of vertices, with each entry separated by whitespace.
     * @param in the input stream
     * @throws java.lang.IndexOutOfBoundsException if the endpoints of any edge are not in prescribed range
     * @throws java.lang.IllegalArgumentException if the number of vertices or edges is negative
     */
    public Graph(In in) {
        this(in.readInt());
        int E = in.readInt();
        if (E &lt; 0) throw new IllegalArgumentException("Number of edges must be nonnegative");
        for (int i = 0; i &lt; E; i++) {
            int v = in.readInt();
            int w = in.readInt();
            addEdge(v, w);
        }
    }

    /**
     * Initializes a new graph that is a deep copy of &lt;tt&gt;G&lt;/tt&gt;.
     * @param G the graph to copy
     */
    public Graph(Graph G) {
        this(G.V());
        this.E = G.E();
        for (int v = 0; v &lt; G.V(); v++) {
            // reverse so that adjacency list is in same order as original
            Stack&lt;Integer&gt; reverse = new Stack&lt;Integer&gt;();
            for (int w : G.adj[v]) {
                reverse.push(w);
            }
            for (int w : reverse) {
                adj[v].add(w);
            }
        }
    }

    /**
     * Returns the number of vertices in the graph.
     * @return the number of vertices in the graph
     */
    public int V() {
        return V;
    }

    /**
     * Returns the number of edges in the graph.
     * @return the number of edges in the graph
     */
    public int E() {
        return E;
    }

    /**
     * Adds the undirected edge v-w to the graph.
     * @param v one vertex in the edge
     * @param w the other vertex in the edge
     * @throws java.lang.IndexOutOfBoundsException unless both 0 &lt;= v &lt; V and 0 &lt;= w &lt; V
     */
    public void addEdge(int v, int w) {
        if (v &lt; 0 || v &gt;= V) throw new IndexOutOfBoundsException();
        if (w &lt; 0 || w &gt;= V) throw new IndexOutOfBoundsException();
        E++;
        adj[v].add(w);
        adj[w].add(v);
    }


    /**
     * Returns the vertices adjacent to vertex &lt;tt&gt;v&lt;/tt&gt;.
     * @return the vertices adjacent to vertex &lt;tt&gt;v&lt;/tt&gt; as an Iterable
     * @param v the vertex
     * @throws java.lang.IndexOutOfBoundsException unless 0 &lt;= v &lt; V
     */
    public Iterable&lt;Integer&gt; adj(int v) {
        if (v &lt; 0 || v &gt;= V) throw new IndexOutOfBoundsException();
        return adj[v];
    }


    /**
     * Returns a string representation of the graph.
     * This method takes time proportional to &lt;em&gt;E&lt;/em&gt; + &lt;em&gt;V&lt;/em&gt;.
     * @return the number of vertices &lt;em&gt;V&lt;/em&gt;, followed by the number of edges &lt;em&gt;E&lt;/em&gt;,
     *    followed by the &lt;em&gt;V&lt;/em&gt; adjacency lists
     */
    public String toString() {
        StringBuilder s = new StringBuilder();
        String NEWLINE = System.getProperty("line.separator");
        s.append(V + " vertices, " + E + " edges " + NEWLINE);
        for (int v = 0; v &lt; V; v++) {
            s.append(v + ": ");
            for (int w : adj[v]) {
                s.append(w + " ");
            }
            s.append(NEWLINE);
        }
        return s.toString();
    }


    /**
     * Unit tests the &lt;tt&gt;Graph&lt;/tt&gt; data type.
     */
    public static void main(String[] args) {
        In in = new In(args[0]);
        Graph G = new Graph(in);
        StdOut.println(G);
    }

}
</pre></body></html>

<!-- saved from url=(0053)http://algs4.cs.princeton.edu/42directed/Digraph.java -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"></head><body><div id="StayFocusd-infobar" style="display:none;">
    <img src="chrome-extension://laankejkbhbdhmipfmgcngdelahlfoji/common/img/eye_19x19_red.png">
    <span id="StayFocusd-infobar-msg"></span>
    <span id="StayFocusd-infobar-links">
        <a id="StayFocusd-infobar-never-show">hide forever</a>&nbsp;&nbsp;|&nbsp;&nbsp;
        <a id="StayFocusd-infobar-hide">hide once</a>
    </span>
</div><pre style="word-wrap: break-word; white-space: pre-wrap;">/*************************************************************************
 *  Compilation:  javac Digraph.java
 *  Execution:    java Digraph filename.txt
 *  Dependencies: Bag.java In.java StdOut.java
 *  Data files:   http://algs4.cs.princeton.edu/42directed/tinyDG.txt
 *
 *  A graph, implemented using an array of lists.
 *  Parallel edges and self-loops are permitted.
 *
 *  % java Digraph tinyDG.txt
 *  13 vertices, 22 edges
 *  0: 5 1 
 *  1: 
 *  2: 0 3 
 *  3: 5 2 
 *  4: 3 2 
 *  5: 4 
 *  6: 9 4 8 0 
 *  7: 6 9
 *  8: 6 
 *  9: 11 10 
 *  10: 12 
 *  11: 4 12 
 *  12: 9 
 *  
 *************************************************************************/

import java.util.InputMismatchException;
import java.util.NoSuchElementException;

/**
 *  The &lt;tt&gt;Digraph&lt;/tt&gt; class represents a directed graph of vertices
 *  named 0 through &lt;em&gt;V&lt;/em&gt; - 1.
 *  It supports the following two primary operations: add an edge to the digraph,
 *  iterate over all of the vertices adjacent from a given vertex.
 *  Parallel edges and self-loops are permitted.
 *  &lt;p&gt;
 *  This implementation uses an adjacency-lists representation, which 
 *  is a vertex-indexed array of {@link Bag} objects.
 *  All operations take constant time (in the worst case) except
 *  iterating over the vertices adjacent from a given vertex, which takes
 *  time proportional to the number of such vertices.
 *  &lt;p&gt;
 *  For additional documentation,
 *  see &lt;a href="http://algs4.cs.princeton.edu/42directed"&gt;Section 4.2&lt;/a&gt; of
 *  &lt;i&gt;Algorithms, 4th Edition&lt;/i&gt; by Robert Sedgewick and Kevin Wayne.
 *
 *  @author Robert Sedgewick
 *  @author Kevin Wayne
 */

public class Digraph {
    private final int V;
    private int E;
    private Bag&lt;Integer&gt;[] adj;
    
    /**
     * Initializes an empty digraph with &lt;em&gt;V&lt;/em&gt; vertices.
     * @param V the number of vertices
     * @throws java.lang.IllegalArgumentException if V &lt; 0
     */
    public Digraph(int V) {
        if (V &lt; 0) throw new IllegalArgumentException("Number of vertices in a Digraph must be nonnegative");
        this.V = V;
        this.E = 0;
        adj = (Bag&lt;Integer&gt;[]) new Bag[V];
        for (int v = 0; v &lt; V; v++) {
            adj[v] = new Bag&lt;Integer&gt;();
        }
    }

    /**  
     * Initializes a digraph from an input stream.
     * The format is the number of vertices &lt;em&gt;V&lt;/em&gt;,
     * followed by the number of edges &lt;em&gt;E&lt;/em&gt;,
     * followed by &lt;em&gt;E&lt;/em&gt; pairs of vertices, with each entry separated by whitespace.
     * @param in the input stream
     * @throws java.lang.IndexOutOfBoundsException if the endpoints of any edge are not in prescribed range
     * @throws java.lang.IllegalArgumentException if the number of vertices or edges is negative
     */
    public Digraph(In in) {
        try {
            this.V = in.readInt();
            if (V &lt; 0) throw new IllegalArgumentException("Number of vertices in a Digraph must be nonnegative");
            adj = (Bag&lt;Integer&gt;[]) new Bag[V];
            for (int v = 0; v &lt; V; v++) {
                adj[v] = new Bag&lt;Integer&gt;();
            }
            int E = in.readInt();
            if (E &lt; 0) throw new IllegalArgumentException("Number of edges in a Digraph must be nonnegative");
            for (int i = 0; i &lt; E; i++) {
                int v = in.readInt();
                int w = in.readInt();
                addEdge(v, w); 
            }
        }
        catch (NoSuchElementException e) {
            throw new InputMismatchException("Invalid input format in Digraph constructor");
        }
    }

    /**
     * Initializes a new digraph that is a deep copy of &lt;tt&gt;G&lt;/tt&gt;.
     * @param G the digraph to copy
     */
    public Digraph(Digraph G) {
        this(G.V());
        this.E = G.E();
        for (int v = 0; v &lt; G.V(); v++) {
            // reverse so that adjacency list is in same order as original
            Stack&lt;Integer&gt; reverse = new Stack&lt;Integer&gt;();
            for (int w : G.adj[v]) {
                reverse.push(w);
            }
            for (int w : reverse) {
                adj[v].add(w);
            }
        }
    }
        
    /**
     * Returns the number of vertices in the digraph.
     * @return the number of vertices in the digraph
     */
    public int V() {
        return V;
    }

    /**
     * Returns the number of edges in the digraph.
     * @return the number of edges in the digraph
     */
    public int E() {
        return E;
    }


    /**
     * Adds the directed edge v-&gt;w to the digraph.
     * @param v the tail vertex
     * @param w the head vertex
     * @throws java.lang.IndexOutOfBoundsException unless both 0 &lt;= v &lt; V and 0 &lt;= w &lt; V
     */
    public void addEdge(int v, int w) {
        if (v &lt; 0 || v &gt;= V) throw new IndexOutOfBoundsException("vertex " + v + " is not between 0 and " + (V-1));
        if (w &lt; 0 || w &gt;= V) throw new IndexOutOfBoundsException("vertex " + w + " is not between 0 and " + (V-1));
        adj[v].add(w);
        E++;
    }

    /**
     * Returns the vertices adjacent from vertex &lt;tt&gt;v&lt;/tt&gt; in the digraph.
     * @return the vertices adjacent from vertex &lt;tt&gt;v&lt;/tt&gt; in the digraph, as an Iterable
     * @param v the vertex
     * @throws java.lang.IndexOutOfBoundsException unless 0 &lt;= v &lt; V
     */
    public Iterable&lt;Integer&gt; adj(int v) {
        if (v &lt; 0 || v &gt;= V) throw new IndexOutOfBoundsException();
        return adj[v];
    }

    /**
     * Returns the reverse of the digraph.
     * @return the reverse of the digraph
     */
    public Digraph reverse() {
        Digraph R = new Digraph(V);
        for (int v = 0; v &lt; V; v++) {
            for (int w : adj(v)) {
                R.addEdge(w, v);
            }
        }
        return R;
    }

    /**
     * Returns a string representation of the graph.
     * This method takes time proportional to &lt;em&gt;E&lt;/em&gt; + &lt;em&gt;V&lt;/em&gt;.
     * @return the number of vertices &lt;em&gt;V&lt;/em&gt;, followed by the number of edges &lt;em&gt;E&lt;/em&gt;,  
     *    followed by the &lt;em&gt;V&lt;/em&gt; adjacency lists
     */
    public String toString() {
        StringBuilder s = new StringBuilder();
        String NEWLINE = System.getProperty("line.separator");
        s.append(V + " vertices, " + E + " edges " + NEWLINE);
        for (int v = 0; v &lt; V; v++) {
            s.append(String.format("%d: ", v));
            for (int w : adj[v]) {
                s.append(String.format("%d ", w));
            }
            s.append(NEWLINE);
        }
        return s.toString();
    }

    /**
     * Unit tests the &lt;tt&gt;Digraph&lt;/tt&gt; data type.
     */
    public static void main(String[] args) {
        In in = new In(args[0]);
        Digraph G = new Digraph(in);
        StdOut.println(G);
    }

}
</pre></body></html>
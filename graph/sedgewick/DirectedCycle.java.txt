
<!-- saved from url=(0059)http://algs4.cs.princeton.edu/42directed/DirectedCycle.java -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"></head><body><div id="StayFocusd-infobar" style="display:none;">
    <img src="chrome-extension://laankejkbhbdhmipfmgcngdelahlfoji/common/img/eye_19x19_red.png">
    <span id="StayFocusd-infobar-msg"></span>
    <span id="StayFocusd-infobar-links">
        <a id="StayFocusd-infobar-never-show">hide forever</a>&nbsp;&nbsp;|&nbsp;&nbsp;
        <a id="StayFocusd-infobar-hide">hide once</a>
    </span>
</div><pre style="word-wrap: break-word; white-space: pre-wrap;">/*************************************************************************
 *  Compilation:  javac DirectedCycle.java
 *  Execution:    java DirectedCycle &lt; input.txt
 *  Dependencies: Digraph.java Stack.java StdOut.java In.java
 *  Data files:   http://algs4.cs.princeton.edu/42directed/tinyDG.txt
 *                http://algs4.cs.princeton.edu/42directed/tinyDAG.txt
 *
 *  Finds a directed cycle in a digraph.
 *  Runs in O(E + V) time.
 *
 *  % java DirectedCycle tinyDG.txt 
 *  Cycle: 3 5 4 3 
 *
 *  %  java DirectedCycle tinyDAG.txt 
 *  No cycle
 *
 *************************************************************************/

/**
 *  The &lt;tt&gt;DirectedCycle&lt;/tt&gt; class represents a data type for 
 *  determining whether a digraph has a directed cycle.
 *  The &lt;em&gt;hasCycle&lt;/em&gt; operation determines whether the digraph has
 *  a directed cycle and, and of so, the &lt;em&gt;cycle&lt;/em&gt; operation
 *  returns one.
 *  &lt;p&gt;
 *  This implementation uses depth-first search.
 *  The constructor takes time proportional to &lt;em&gt;V&lt;/em&gt; + &lt;em&gt;E&lt;/em&gt;
 *  (in the worst case),
 *  where &lt;em&gt;V&lt;/em&gt; is the number of vertices and &lt;em&gt;E&lt;/em&gt; is the number of edges.
 *  Afterwards, the &lt;em&gt;hasCycle&lt;/em&gt; operation takes constant time;
 *  the &lt;em&gt;cycle&lt;/em&gt; operation takes time proportional
 *  to the length of the cycle.
 *  &lt;p&gt;
 *  See {@link Topological} to compute a topological order if the
 *  digraph is acyclic.
 *  &lt;p&gt;
 *  For additional documentation, see &lt;a href="/algs4/42digraph"&gt;Section 4.2&lt;/a&gt; of
 *  &lt;i&gt;Algorithms, 4th Edition&lt;/i&gt; by Robert Sedgewick and Kevin Wayne.
 *
 *  @author Robert Sedgewick
 *  @author Kevin Wayne
 */
public class DirectedCycle {
    private boolean[] marked;        // marked[v] = has vertex v been marked?
    private int[] edgeTo;            // edgeTo[v] = previous vertex on path to v
    private boolean[] onStack;       // onStack[v] = is vertex on the stack?
    private Stack&lt;Integer&gt; cycle;    // directed cycle (or null if no such cycle)

    /**
     * Determines whether the digraph &lt;tt&gt;G&lt;/tt&gt; has a directed cycle and, if so,
     * finds such a cycle.
     * @param G the digraph
     */
    public DirectedCycle(Digraph G) {
        marked  = new boolean[G.V()];
        onStack = new boolean[G.V()];
        edgeTo  = new int[G.V()];
        for (int v = 0; v &lt; G.V(); v++)
            if (!marked[v]) dfs(G, v);
    }

    // check that algorithm computes either the topological order or finds a directed cycle
    private void dfs(Digraph G, int v) {
        onStack[v] = true;
        marked[v] = true;
        for (int w : G.adj(v)) {

            // short circuit if directed cycle found
            if (cycle != null) return;

            //found new vertex, so recur
            else if (!marked[w]) {
                edgeTo[w] = v;
                dfs(G, w);
            }

            // trace back directed cycle
            else if (onStack[w]) {
                cycle = new Stack&lt;Integer&gt;();
                for (int x = v; x != w; x = edgeTo[x]) {
                    cycle.push(x);
                }
                cycle.push(w);
                cycle.push(v);
            }
        }

        onStack[v] = false;
    }

    /**
     * Does the digraph have a directed cycle?
     * @return &lt;tt&gt;true&lt;/tt&gt; if the digraph has a directed cycle, &lt;tt&gt;false&lt;/tt&gt; otherwise
     */
    public boolean hasCycle() {
        return cycle != null;
    }

    /**
     * Returns a directed cycle if the digraph has a directed cycle, and &lt;tt&gt;null&lt;/tt&gt; otherwise.
     * @return a directed cycle (as an iterable) if the digraph has a directed cycle,
     *    and &lt;tt&gt;null&lt;/tt&gt; otherwise
     */
    public Iterable&lt;Integer&gt; cycle() {
        return cycle;
    }


    // certify that digraph is either acyclic or has a directed cycle
    private boolean check(Digraph G) {

        if (hasCycle()) {
            // verify cycle
            int first = -1, last = -1;
            for (int v : cycle()) {
                if (first == -1) first = v;
                last = v;
            }
            if (first != last) {
                System.err.printf("cycle begins with %d and ends with %d\n", first, last);
                return false;
            }
        }


        return true;
    }

    /**
     * Unit tests the &lt;tt&gt;DirectedCycle&lt;/tt&gt; data type.
     */
    public static void main(String[] args) {
        In in = new In(args[0]);
        Digraph G = new Digraph(in);

        DirectedCycle finder = new DirectedCycle(G);
        if (finder.hasCycle()) {
            StdOut.print("Cycle: ");
            for (int v : finder.cycle()) {
                StdOut.print(v + " ");
            }
            StdOut.println();
        }

        else {
            StdOut.println("No cycle");
        }
    }

}
</pre></body></html>

<!-- saved from url=(0049)http://algs4.cs.princeton.edu/44sp/AcyclicLP.java -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"></head><body><div id="StayFocusd-infobar" style="display:none;">
    <img src="chrome-extension://laankejkbhbdhmipfmgcngdelahlfoji/common/img/eye_19x19_red.png">
    <span id="StayFocusd-infobar-msg"></span>
    <span id="StayFocusd-infobar-links">
        <a id="StayFocusd-infobar-never-show">hide forever</a>&nbsp;&nbsp;|&nbsp;&nbsp;
        <a id="StayFocusd-infobar-hide">hide once</a>
    </span>
</div><pre style="word-wrap: break-word; white-space: pre-wrap;">/*************************************************************************
 *  Compilation:  javac AcyclicLP.java
 *  Execution:    java AcyclicP V E
 *  Dependencies: EdgeWeightedDigraph.java DirectedEdge.java Topological.java
 *  Data files:   http://algs4.cs.princeton.edu/44sp/tinyEWDAG.txt
 *  
 *  Computes longeset paths in an edge-weighted acyclic digraph.
 *
 *  Remark: should probably check that graph is a DAG before running
 *
 *  % java AcyclicLP tinyEWDAG.txt 5
 *  5 to 0 (2.44)  5-&gt;1  0.32   1-&gt;3  0.29   3-&gt;6  0.52   6-&gt;4  0.93   4-&gt;0  0.38   
 *  5 to 1 (0.32)  5-&gt;1  0.32   
 *  5 to 2 (2.77)  5-&gt;1  0.32   1-&gt;3  0.29   3-&gt;6  0.52   6-&gt;4  0.93   4-&gt;7  0.37   7-&gt;2  0.34   
 *  5 to 3 (0.61)  5-&gt;1  0.32   1-&gt;3  0.29   
 *  5 to 4 (2.06)  5-&gt;1  0.32   1-&gt;3  0.29   3-&gt;6  0.52   6-&gt;4  0.93   
 *  5 to 5 (0.00)  
 *  5 to 6 (1.13)  5-&gt;1  0.32   1-&gt;3  0.29   3-&gt;6  0.52   
 *  5 to 7 (2.43)  5-&gt;1  0.32   1-&gt;3  0.29   3-&gt;6  0.52   6-&gt;4  0.93   4-&gt;7  0.37   
 *
 *************************************************************************/

/**
 *  The &lt;tt&gt;AcyclicLP&lt;/tt&gt; class represents a data type for solving the
 *  single-source longest paths problem in edge-weighted directed
 *  acyclic graphs (DAGs). The edge weights can be positive, negative, or zero.
 *  &lt;p&gt;
 *  This implementation uses a topological-sort based algorithm.
 *  The constructor takes time proportional to &lt;em&gt;V&lt;/em&gt; + &lt;em&gt;E&lt;/em&gt;,
 *  where &lt;em&gt;V&lt;/em&gt; is the number of vertices and &lt;em&gt;E&lt;/em&gt; is the number of edges.
 *  Afterwards, the &lt;tt&gt;distTo()&lt;/tt&gt; and &lt;tt&gt;hasPathTo()&lt;/tt&gt; methods take
 *  constant time and the &lt;tt&gt;pathTo()&lt;/tt&gt; method takes time proportional to the
 *  number of edges in the longest path returned.
 *  &lt;p&gt;
 *  For additional documentation, see &lt;a href="/algs4/44sp"&gt;Section 4.4&lt;/a&gt; of
 *  &lt;i&gt;Algorithms, 4th Edition&lt;/i&gt; by Robert Sedgewick and Kevin Wayne.
 *
 *  @author Robert Sedgewick
 *  @author Kevin Wayne
 */
public class AcyclicLP {
    private double[] distTo;          // distTo[v] = distance  of longest s-&gt;v path
    private DirectedEdge[] edgeTo;    // edgeTo[v] = last edge on longest s-&gt;v path

    /**
     * Computes a longest paths tree from &lt;tt&gt;s&lt;/tt&gt; to every other vertex in
     * the directed acyclic graph &lt;tt&gt;G&lt;/tt&gt;.
     * @param G the acyclic digraph
     * @param s the source vertex
     * @throws IllegalArgumentException if the digraph is not acyclic
     * @throws IllegalArgumentException unless 0 &amp;le; &lt;tt&gt;s&lt;/tt&gt; &amp;le; &lt;tt&gt;V&lt;/tt&gt; - 1
     */
    public AcyclicLP(EdgeWeightedDigraph G, int s) {
        distTo = new double[G.V()];
        edgeTo = new DirectedEdge[G.V()];
        for (int v = 0; v &lt; G.V(); v++) distTo[v] = Double.NEGATIVE_INFINITY;
        distTo[s] = 0.0;

        // relax vertices in toplogical order
        Topological topological = new Topological(G);
        if (!topological.hasOrder())
            throw new IllegalArgumentException("Digraph is not acyclic.");
        for (int v : topological.order()) {
            for (DirectedEdge e : G.adj(v))
                relax(e);
        }
    }

    // relax edge e, but update if you find a *longer* path
    private void relax(DirectedEdge e) {
        int v = e.from(), w = e.to();
        if (distTo[w] &lt; distTo[v] + e.weight()) {
            distTo[w] = distTo[v] + e.weight();
            edgeTo[w] = e;
        }       
    }

    /**
     * Returns the length of a longest path from the source vertex &lt;tt&gt;s&lt;/tt&gt; to vertex &lt;tt&gt;v&lt;/tt&gt;.
     * @param v the destination vertex
     * @return the length of a longest path from the source vertex &lt;tt&gt;s&lt;/tt&gt; to vertex &lt;tt&gt;v&lt;/tt&gt;;
     *    &lt;tt&gt;Double.NEGATIVE_INFINITY&lt;/tt&gt; if no such path
     */
    public double distTo(int v) {
        return distTo[v];
    }

    /**
     * Is there a path from the source vertex &lt;tt&gt;s&lt;/tt&gt; to vertex &lt;tt&gt;v&lt;/tt&gt;?
     * @param v the destination vertex
     * @return &lt;tt&gt;true&lt;/tt&gt; if there is a path from the source vertex
     *    &lt;tt&gt;s&lt;/tt&gt; to vertex &lt;tt&gt;v&lt;/tt&gt;, and &lt;tt&gt;false&lt;/tt&gt; otherwise
     */
    public boolean hasPathTo(int v) {
        return distTo[v] &gt; Double.NEGATIVE_INFINITY;
    }

    /**
     * Returns a longest path from the source vertex &lt;tt&gt;s&lt;/tt&gt; to vertex &lt;tt&gt;v&lt;/tt&gt;.
     * @param v the destination vertex
     * @return a longest path from the source vertex &lt;tt&gt;s&lt;/tt&gt; to vertex &lt;tt&gt;v&lt;/tt&gt;
     *    as an iterable of edges, and &lt;tt&gt;null&lt;/tt&gt; if no such path
     */
    public Iterable&lt;DirectedEdge&gt; pathTo(int v) {
        if (!hasPathTo(v)) return null;
        Stack&lt;DirectedEdge&gt; path = new Stack&lt;DirectedEdge&gt;();
        for (DirectedEdge e = edgeTo[v]; e != null; e = edgeTo[e.from()]) {
            path.push(e);
        }
        return path;
    }



    /**
     * Unit tests the &lt;tt&gt;AcyclicLP&lt;/tt&gt; data type.
     */
    public static void main(String[] args) {
        In in = new In(args[0]);
        int s = Integer.parseInt(args[1]);
        EdgeWeightedDigraph G = new EdgeWeightedDigraph(in);

        AcyclicLP lp = new AcyclicLP(G, s);

        for (int v = 0; v &lt; G.V(); v++) {
            if (lp.hasPathTo(v)) {
                StdOut.printf("%d to %d (%.2f)  ", s, v, lp.distTo(v));
                for (DirectedEdge e : lp.pathTo(v)) {
                    StdOut.print(e + "   ");
                }
                StdOut.println();
            }
            else {
                StdOut.printf("%d to %d         no path\n", s, v);
            }
        }
    }
}
</pre></body></html>

<!-- saved from url=(0057)http://algs4.cs.princeton.edu/42directed/Topological.java -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"></head><body><div id="StayFocusd-infobar" style="display:none;">
    <img src="chrome-extension://laankejkbhbdhmipfmgcngdelahlfoji/common/img/eye_19x19_red.png">
    <span id="StayFocusd-infobar-msg"></span>
    <span id="StayFocusd-infobar-links">
        <a id="StayFocusd-infobar-never-show">hide forever</a>&nbsp;&nbsp;|&nbsp;&nbsp;
        <a id="StayFocusd-infobar-hide">hide once</a>
    </span>
</div><pre style="word-wrap: break-word; white-space: pre-wrap;">/*************************************************************************
 *  Compilation:  javac Topoological.java
 *  Dependencies: Digraph.java DepthFirstOrder.java DirectedCycle.java
 *                EdgeWeightedDigraph.java EdgeWeightedDirectedCycle.java
 *                SymbolDigraph.java
 *  Data files:   http://algs4.cs.princeton.edu/42directed/jobs.txt
 *
 *  Compute topological ordering of a DAG or edge-weighted DAG.
 *  Runs in O(E + V) time.
 *
 *  % java Topological jobs.txt "/"
 *  Calculus
 *  Linear Algebra
 *  Introduction to CS
 *  Programming Systems
 *  Algorithms
 *  Theoretical CS
 *  Artificial Intelligence
 *  Machine Learning
 *  Neural Networks
 *  Robotics
 *  Scientific Computing
 *  Computational Biology
 *  Databases
 *
 *
 *************************************************************************/

/**
 *  The &lt;tt&gt;Topological&lt;/tt&gt; class represents a data type for 
 *  determining a topological order of a directed acyclic graph (DAG).
 *  Recall, a digraph has a topological order if and only if it is a DAG.
 *  The &lt;em&gt;hasOrder&lt;/em&gt; operation determines whether the digraph has
 *  a topological order, and if so, the &lt;em&gt;order&lt;/em&gt; operation
 *  returns one.
 *  &lt;p&gt;
 *  This implementation uses depth-first search.
 *  The constructor takes time proportional to &lt;em&gt;V&lt;/em&gt; + &lt;em&gt;E&lt;/em&gt;
 *  (in the worst case),
 *  where &lt;em&gt;V&lt;/em&gt; is the number of vertices and &lt;em&gt;E&lt;/em&gt; is the number of edges.
 *  Afterwards, the &lt;em&gt;hasOrder&lt;/em&gt; operation takes constant time;
 *  the &lt;em&gt;order&lt;/em&gt; operation takes time proportional to &lt;em&gt;V&lt;/em&gt;.
 *  &lt;p&gt;
 *  See {@link DirectedCycle} and {@link EdgeWeightedDirectedCycle} to compute a
 *  directed cycle if the digraph is not a DAG.
 *  &lt;p&gt;
 *  For additional documentation, see &lt;a href="/algs4/42digraph"&gt;Section 4.2&lt;/a&gt; of
 *  &lt;i&gt;Algorithms, 4th Edition&lt;/i&gt; by Robert Sedgewick and Kevin Wayne.
 *
 *  @author Robert Sedgewick
 *  @author Kevin Wayne
 */
public class Topological {
    private Iterable&lt;Integer&gt; order;    // topological order

    /**
     * Determines whether the digraph &lt;tt&gt;G&lt;/tt&gt; has a topological order and, if so,
     * finds such a topological order.
     * @param G the digraph
     */
    public Topological(Digraph G) {
        DirectedCycle finder = new DirectedCycle(G);
        if (!finder.hasCycle()) {
            DepthFirstOrder dfs = new DepthFirstOrder(G);
            order = dfs.reversePost();
        }
    }

    /**
     * Determines whether the edge-weighted digraph &lt;tt&gt;G&lt;/tt&gt; has a topological
     * order and, if so, finds such an order.
     * @param G the edge-weighted digraph
     */
    public Topological(EdgeWeightedDigraph G) {
        EdgeWeightedDirectedCycle finder = new EdgeWeightedDirectedCycle(G);
        if (!finder.hasCycle()) {
            DepthFirstOrder dfs = new DepthFirstOrder(G);
            order = dfs.reversePost();
        }
    }

    /**
     * Returns a topological order if the digraph has a topologial order,
     * and &lt;tt&gt;null&lt;/tt&gt; otherwise.
     * @return a topological order of the vertices (as an interable) if the
     *    digraph has a topological order (or equivalently, if the digraph is a DAG),
     *    and &lt;tt&gt;null&lt;/tt&gt; otherwise
     */
    public Iterable&lt;Integer&gt; order() {
        return order;
    }

    /**
     * Does the digraph have a topological order?
     * @return &lt;tt&gt;true&lt;/tt&gt; if the digraph has a topological order (or equivalently,
     *    if the digraph is a DAG), and &lt;tt&gt;false&lt;/tt&gt; otherwise
     */
    public boolean hasOrder() {
        return order != null;
    }

    /**
     * Unit tests the &lt;tt&gt;Topological&lt;/tt&gt; data type.
     */
    public static void main(String[] args) {
        String filename  = args[0];
        String delimiter = args[1];
        SymbolDigraph sg = new SymbolDigraph(filename, delimiter);
        Topological topological = new Topological(sg.G());
        for (int v : topological.order()) {
            StdOut.println(sg.name(v));
        }
    }

}
</pre></body></html>